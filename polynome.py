# -*- coding: utf-8 -*-
"""polynome.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bOVfaJEBOacnzn6ImjiDqJjzGhIhDKih

TP2

Exercice 1 : Polynômes

1. Écrire une fonction afficher(p) qui affiche le polynôme p sous la forme ”an X^n + ... + a0”.
2. Écrire une fonction get_valeur(p, x) qui calcule et renvoie la valeur du polynôme p au point x.
3. Écrire une fonction deriver(p) qui calcule et retourne le polynôme dérivé du polynôme p.
4. Écrire un programme principal pour vérifier le bon fonctionnement de ces 3 fonctions.
"""

def afficher(p):
    terme=[]
    n=len(p)
    for i in range(n-1,-1,-1):
        coef=p[i]
        if coef!=0:
            if i==0:
                terme.append(f"{coef}")
            elif i==1:
                terme.append(f"{coef}*X")
            else:
                terme.append(f"{coef}*X^{i}")
    return " + ".join(terme)

def getvaleur(p,x):
    n=len(p)
    valeur=0
    for i in range(n-1,-1,-1):
        coef=p[i]
        valeur += coef*x**i

    return valeur

def deriver(p):
    terme=[]
    n=len(p)
    for i in range(n-1,-1,-1):
        coef=p[i]
        if coef!=0:
            if i==0:
                terme.append(f"0 ")
            elif i==1:
                terme.append(f"{coef}")
            else:
                mult=coef*i
                terme.append(f"{mult}*X^{i-1}",)
    return " + ".join(terme)


p=[1,2,5]
poly=afficher(p)
V=getvaleur(p,2)
deriver=deriver(p)
print(poly)
print("Le résultat du polynôme est ",V)
print(deriver)

# Fonction pour afficher le polynôme
def afficher(p):
    termes = []
    for i in range(len(p) - 1, -1, -1):
        if p[i] != 0:
            if i == 0:
                termes.append(f"{p[i]}")
            elif i == 1:
                termes.append(f"{p[i]}x")
            else:
                termes.append(f"{p[i]}x^{i}")
    return " + ".join(termes) if termes else "0"

# Fonction pour calculer la valeur du polynôme en un point donné x
def get_valeur(p, x):
    resultat = 0
    for i in range(len(p)):
        resultat += p[i] * (x ** i)
    return resultat

# Fonction pour calculer la dérivée du polynôme
def deriv(p):
    if len(p) == 1:
        return [0]
    polynome_derivé = []
    for i in range(1, len(p)):
        polynome_derivé.append(i * p[i])
    return polynome_derivé

# Programme principal pour tester les fonctions
if __name__ == "__main__":
    p = [3, 2, 5]  # Exemple de polynôme: 3 + 2x + 5x^2

    # Afficher le polynôme
    print("Polynôme p(x) :", afficher(p))

    # Calculer la valeur du polynôme pour x=2
    x = 2
    print(f"p({x}) =", get_valeur(p, x))

    # Calculer la dérivée du polynôme
    derive_p = deriv(p)
    print("Dérivée p'(x) :", afficher(derive_p))

"""Exercice 2 : Puissance 4
Le puissance 4 est un jeu de société se jouant à deux. Une grille composée de 6 lignes et 7 colonnes est
initialement vide. À chaque tour, le joueur choisit la colonne dans laquelle placer un de ses jetons. Le jeton tombe
jusqu’à l’emplacement libre le plus bas dans la colonne. Le premier joueur disposant 4 jetons alignés (en ligne, en
colonne, ou en diagonale) dans la grille remporte la victoire.
1. Implémentez une fonction afficher_grille(grille) permettant d’afficher l’état de la grille de jeu à l’écran.
La grille est une liste de lignes, et chaque ligne est une liste d’entiers. La valeur 0 indique que la case est vide,
et les valeurs 1 et 2 indiquent respectivement que les joueurs 1 et 2 ont placé un jeton dans cette case.
Pour l’affichage, on veut que les cases vides soient indiquées par le caractère ’.’, les jetons du joueur 1 par le
caractère ’X’, et les jetons du joueur 2 par le caractère ’O’.
2. Implémentez une fonction jouer(grille, joueur, colonne) simulant le coup d’un joueur. La fonction doit
retourner False si le coup est impossible, et True sinon. Lorsque le coup est possible, la fonction doit également
mettre à jour la grille en y insérant le nouveau jeton.
3. Implémentez une fonction vainqueur(grille) qui retourne 0 si aucun des deux joueurs n’a gagné au vu de
l’état actuel de la grille, retourne 1 si le joueur 1 a gagné, et 2 si le joueur 2 a gagné.
4. Écrivez un programme principal permettant de jouer une partie à 2 en utilisant les fonctions que vous avez
définies. Le programme devra demander tour à tour aux joueurs d’indiquer la colonne dans laquelle ils souhaitent jouer, et afficher le nouvel état de la grille. La partie doit se terminer lorsqu’un des deux joueurs gagne
ou lorsque la partie est terminée.
"""

grille = [[0] * 7 for i in range(6)]

def afficher_grille(grille):
     for ligne in grille:
        print("| " + " | ".join([' . ' if case == 0 else 'X' if case == 1 else 'O' for case in ligne]) + " |")
     print("-" * 29)  # Ligne pour séparer le bas de la grille

afficher_grille(grille)

def jouer(grille, joueur, colonne):

# Fonction pour afficher l'état de la grille
def afficher_grille(grille):
    # Affichage de chaque ligne de la grille
    for ligne in grille:
        print("| " + " | ".join([' ' if case == 0 else 'X' if case == 1 else 'O' for case in ligne]) + " |")
    print("-" * 29)  # Ligne pour séparer le bas de la grille

# Fonction pour simuler un coup d'un joueur
def jouer(grille, joueur, colonne):
    # Vérifier si la colonne est valide et s'il y a un espace libre
    if colonne < 0 or colonne >= len(grille[0]) or grille[0][colonne] != 0:
        return False  # Coup impossible

    # Trouver la ligne la plus basse libre dans la colonne
    for ligne in range(len(grille) - 1, -1, -1):
        if grille[ligne][colonne] == 0:
            grille[ligne][colonne] = joueur
            return True  # Coup valide
    return False  # Par sécurité, mais en principe on ne devrait jamais arriver ici

# Fonction pour vérifier si un joueur a gagné
def vainqueur(grille):
    # Vérifier les lignes, colonnes, et diagonales pour 4 jetons alignés
    for ligne in range(len(grille)):
        for colonne in range(len(grille[0])):
            # Vérification horizontale
            if colonne <= 3 and grille[ligne][colonne] == grille[ligne][colonne + 1] == grille[ligne][colonne + 2] == grille[ligne][colonne + 3] != 0:
                return grille[ligne][colonne]
            # Vérification verticale
            if ligne <= 2 and grille[ligne][colonne] == grille[ligne + 1][colonne] == grille[ligne + 2][colonne] == grille[ligne + 3][colonne] != 0:
                return grille[ligne][colonne]
            # Vérification diagonale (vers la droite)
            if ligne <= 2 and colonne <= 3 and grille[ligne][colonne] == grille[ligne + 1][colonne + 1] == grille[ligne + 2][colonne + 2] == grille[ligne + 3][colonne + 3] != 0:
                return grille[ligne][colonne]
            # Vérification diagonale (vers la gauche)
            if ligne <= 2 and colonne >= 3 and grille[ligne][colonne] == grille[ligne + 1][colonne - 1] == grille[ligne + 2][colonne - 2] == grille[ligne + 3][colonne - 3] != 0:
                return grille[ligne][colonne]
    return 0  # Aucun gagnant

# Programme principal
if __name__ == "__main__":
    # Initialisation de la grille (6 lignes, 7 colonnes)
    grille = [[0 for _ in range(7)] for _ in range(6)]
    joueur_actuel = 1  # Le joueur 1 commence

    # Boucle de jeu
    while True:
        afficher_grille(grille)
        colonne = int(input(f"Joueur {joueur_actuel}, choisissez une colonne (0-6) : "))

        if not jouer(grille, joueur_actuel, colonne):
            print("Coup impossible, essayez à nouveau.")
            continue

        # Vérifier si le coup actuel donne un gagnant
        gagnant = vainqueur(grille)
        if gagnant != 0:
            afficher_grille(grille)
            print(f"Le joueur {gagnant} a gagné!")
            break

        # Changer de joueur (1 devient 2, et 2 devient 1)
        joueur_actuel = 1 if joueur_actuel == 2 else 2

        # Vérifier si la grille est pleine (match nul)
        if all(grille[0][colonne] != 0 for colonne in range(7)):
            afficher_grille(grille)
            print("Match nul ! La grille est pleine.")
            break

"""2.2 Compléter le programme précédent pour qu’il demande aussi un réel puis affiche les 2 valeurs saisies. Un exemple d’exécution est donné ci-dessous :

Veuillez entrer un entier : 42
Veuillez entrer un réel : 13.37
Vous avez saisi 42 et 13.37
"""

# bloc d'instructions à compléter et à exécuter
e = input('Veuillez entrer un entier :')
r = input('Veuillez entrer un réel :')
print('Vous avez saisi {} et {}'.format(e, r))

"""Exercice 3 : Conditionnelles
1. Écrire un algorithme qui demande un nombre à l’utilisateur et teste si ce nombre est positif ou non.
2. Écrire un algorithme qui demande un nombre à l’utilisateur et teste si ce nombre est strictement positif, nul
ou strictement négatif.
3. Ecrire un programme qui demande une année et affiche si celle-ci est bissextile ou non. Les années bissextiles
sont les années :
— soit divisibles par 4 mais non divisibles par 100
— soit divisibles par 400
"""

#E1 et E2
nombre = float(input("Entrez un nombre : "))
if nombre > 0:
    print("Le nombre est strictement positif.")
elif nombre == 0:
    print("Le nombre est nul.")
else:
    print("Le nombre est strictement négatif.")

#E3
annee = int(input("Entrez une année : "))
if (annee % 400 == 0) or (annee % 4 == 0 and annee % 100 != 0):
    print(f"{annee} est une année bissextile.")
else:
    print(f"{annee} n'est pas une année bissextile.")

"""4. Fonctions, boucles et premiers algorithmes

4.1 (a) la somme des N premiers entiers.
"""

# bloc d'instructions à compléter et à exécuter
def som(n):
    return sum(range(1,n+1))

n = int(input('Veuillez entrer un entier :'))
print('La somme des {} premiers entiers est {}'.format(n, som(n)))

"""(b)  N!"""

# bloc d'instructions à compléter et à exécuter
def fact(n):
    res = 1
    if n > 1:
        for i in range(2,n+1):
            res *= i
    return res

n = int(input('Veuillez entrer un entier :'))
print('{}! = {}'.format(n, fact(n)))

"""(c)  x^N"""

# bloc d'instructions à compléter et à exécuter
def expo(x, n):
    if n == 0:
        return 1

    res = x
    if n > 1:
        for i in range(1,n):
            res *= x
    return res

x = float(input('Veuillez entrer un réel :'))
n = int(input('Veuillez entrer un entier positif :'))
print('{}^{} = {}'.format(x, n, expo(x,n)))

"""(D)"""

# bloc d'instructions à compléter et à exécuter
from math import factorial
from math import exp

def expo(x, n):

    eps = 10**(-n)
    res = 1

    i = 1
    while abs(res - exp(x)) >= eps:
        res += (x**i) / factorial(i)
        i += 1

    return res, i

print('Calcul de exp(x) à 10^-n près :')
x = float(input('Veuillez entrer x :'))
n = int(input('Veuillez entrer n :'))
res, i = expo(x, n)
print('Résultat :')
print('exp({}) = {} - calcul avec {} terme(s)'.format(x, res, i))
print('Vérification : math.exp({}) = {}'.format(x, exp(x)))

"""5. Boucles imbriquées

1. Écrire une méthode permettant d’afficher un échiquier (carré de N par N) :
(a) les cases noires seront représentées par un ”X” et les cases blanches par ” ”
(b) le tour de l’échiquier et de chaque case sera dessiné avec les caractères + (coin), | (ligne verticale) et −
(ligne horizontale)
Un exemple d’affichage est (échiquier de 4x4) :
"""

# bloc d'instructions à compléter et à exécuter
def echiquier(n):
    print('Voici un échiquier ' + str(n) + 'x' + str(n))

    for i in range(n):
        for j in range(n):
            print('+---', end='')
        print('+')

        for j in range(n):
            if (i+j) % 2 == 0:
                print('|   ', end='')
            else:
                print('| X ', end='')
        print('|')

    for j in range(n):
        print('+---', end='')
    print('+')

n = int(input('Veuillez entrer un entier :'))
echiquier(n)

